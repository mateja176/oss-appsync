type Query {
  todo(id: ID!): Todo!
  todos(
    limit: Int
    offset: Int
    filter: TodoFilterInput
    sort: [TodoSortInput]
  ): [Todo!]!
  user(id: ID!): User!
  users(
    limit: Int
    offset: Int
    filter: UserFilterInput
    sort: [UserSortInput]
  ): [User!]!
}

type Todo {
  id: ID!
  title: String!
  description: String!
  completed: Boolean!
  author: User!
}

type User {
  id: ID!
  name: String!
  todos: [Todo!]!
}

input TodoFilterInput {
  id: IDFilterInput
  title: StringFilterInput
  description: StringFilterInput
  completed: BooleanFilterInput
}

input IDFilterInput {
  equals: ID!
  not: ID!
}

input StringFilterInput {
  equals: String!
  not: String!
  le: String!
  lt: String!
  lte: String!
  ge: String!
  gt: String!
  gte: String!
  in: [String!]
  notIn: [String!]
  contains: String
  notContains: String
  startsWith: String
  endsWith: String
}

input BooleanFilterInput {
  equals: Boolean!
  not: Boolean!
}

input TodoSortInput {
  title: SortDirection!
  description: SortDirection!
  completed: SortDirection!
  author: SortDirection!
}

enum SortDirection {
  asc
  desc
}

input UserFilterInput {
  id: IDFilterInput
  name: StringFilterInput
}

input UserSortInput {
  name: SortDirection!
  todos: SortDirection!
}

type Mutation {
  createTodo(input: TodoCreateInput!): Todo!
  updateTodo(input: TodoUpdateInput!): Todo!
  deleteTodo(id: ID!): Todo!
  createUser(input: UserCreateInput!): User!
  updateUser(input: UserUpdateInput!): User!
  deleteUser(id: ID!): User!
}

input TodoCreateInput {
  title: String!
  description: String!
  completed: Boolean!
  author: ID!
}

input TodoUpdateInput {
  title: String
  description: String
  completed: Boolean
  author: ID
}

input UserCreateInput {
  name: String!
  todos: [Todo!]!
}

input UserUpdateInput {
  name: String
  todos: [Todo!]
}
